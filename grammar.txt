<statement> ::= <function> | <while> | <if> | <else> | <output> | <input> | <return> | <variable-declaration> | <expression> | <variable-assignment>
<function> ::= [FUNCTION] [IDENTIFIER] ( ) [RETURNS] <primitive-type> <statement> [ENDFUNCTION] | [FUNCTION] [IDENTIFIER] (  [IDENTIFIER] : <primitive-type> <function-parameter> <statement> [ENDFUNCTION] 
<function-parameter> ::= ) | , [IDENTIFIER] : <primitive-type> <function-parameter> 
<while> ::= [WHILE] ( <expression> ) <statement> [ENDWHILE]
<if> ::= [IF] ( <expression> ) [THEN] <statement>
<else-if> ::= [ELSE] <if>
<else> ::= [ELSE] <statement>
<return> ::= [RETURN] <expression>
<primitive-literal> ::= [INTEGER_LITERAL] | [FLOAT_LITERAL] | [STRING_LITERAL] | [BOOLEAN_LITERAL]
<primitive-type> ::= [INTEGER] | [STRING] | [FLOAT] | [BOOLEAN]
<variable-declaration> ::= [DECLARE] [IDENTIFIER] : <primitive-type>
<variable-assignment> ::= [IDENTIFIER] [ASSIGNMENT] <expression>
<output> ::= [OUTPUT] <expression> <statement>
<input> ::= [INPUT] [IDENTIFIER] <statement>

<expression> ::= <unary-expression> | [IDENTIFIER] | [IDENTIFIER] ( <function-call-paramter> ) | <primitive-literal> | ( <single-expression> )
<binary-expression> :: = <expression> <operator> <expression>
<binary-expression> ::= <expression> <operator> <expression>

<expression> ::= <binary-expression> | <unary-expression> | (expression) | [IDENTIFIER] ( <function-call-parameter> ) | [IDENTIFIER] | <primitive-literal>
<expression-type> ::= <unary-expression> | (expression) | [IDENTIFIER] | [IDENTIFIER] ( <function-call-parameter> ) | <primitive-literal> | <binary-expression>
<function-call-parameter> ::= <expression> , | <expression>
<binary-expression> ::= <expression> <operator> <expression>
<unary-expression> ::= [NOT] <expression> | - <expression>

OUTPUT 2 + 2
OUTPUT (3 + 2) + 5