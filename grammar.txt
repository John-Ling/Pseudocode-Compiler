<statement> ::= <function> | <while> | <if> | <else> | <output> | <input> | <return> | <variable-declaration> | <expression> | <variable-assignment>
<function> ::= [FUNC] [IDENTIFIER] ( <function-parameter> 
<function-parameter> ::= ) | , <primitive-literal> : [IDENTIFIER] <function-parameter>
<while> ::= [WHILE] ( <expression> ) <statement>
<if> ::= [IF] ( <expression> ) [THEN] <statement>
<else-if> ::= [ELSE] <if>
<else> ::= [ELSE] <statement>
<return> ::= [RETURN] [IDENTIFIER] | [RETURN] <primitive-literal>
<primitive-literal> ::= [INTEGER_LITERAL] | [FLOAT_LITERAL] | [STRING_LITERAL] | [BOOLEAN_LITERAL]
<primitive-type> ::= [INTEGER] | [STRING] | [FLOAT] | [BOOLEAN]
<variable-declaration> ::= [DECLARE] [IDENTIFIER] : <primitive-type>
<variable-assignment> ::= [IDENTIFIER] [ASSIGNMENT] <expression>
<output> ::= [OUTPUT] <expression>
<input> ::= [INPUT] [IDENTIFIER]
<expression> ::= <primitive-literal> | ( <expression> ) | <expression> ( <function-call-parameter> ) | <binary-expression> | <unary-expression>
<function-call-parameter> ::= <expression> , | <expression>
<binary-expression> ::= <expression> <operator> <expression>
<unary-expression> ::= ! <expression> | - <expression>
<end> ::= [EOL]